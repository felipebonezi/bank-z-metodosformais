\begin{zed}
  [Nome]
\end{zed}

\begin{zed}
  TipoMovimentacao ::= CREDITO | DEBITO
\end{zed}

\begin{zed}
  Modalidade ::= BAIXA_AUTOMATICA | BAIXA_MANUAL
\end{zed}

\begin{schema}{ContaIndividual}
	titular: Cliente\\
\end{schema}

\begin{schema}{ContaConjunta}
	ContaIndividual\\
	dependente: Cliente\\
\end{schema}

\begin{zed}
	TipoConta ::= individual \ldata ContaIndividual \rdata | conjunta \ldata ContaConjunta \rdata
\end{zed}

\begin{schema}{ContaCorrente}
	movimentacoes_c: \power Movimentacao\\
	saldo_c: \nat\\
	tipo: TipoConta\\
	saldo: \power Movimentacao \pfun \nat\\
\where
	saldo_c = \forall m: movimentacoes_c @ 
							(m = \emptyset \implies saldo(m) = 0) 
							^ 
							((m.tm = DEBITO => \exists n:m @ saldo(m) = saldo(m \setminus \{n\}) - n.valor)
							v
							(m.tm = CREDITO => \exists n:m @ saldo(m) = n.valor + saldo(m \setminus \{n\})))\\
\end{schema}

\begin{schema}{ContaPoupanca}
	ContaCorrente
	movimentacoes_p: \power Movimentacao\\
	modalidade: Modalidade\\
	saldo_p: \nat\\
\where
	saldo_p = \forall m: movimentacoes_p @ 
							(m = \emptyset \implies saldo(m) = 0) 
							^ 
							((m.tm = DEBITO => \exists n:m @ saldo(m) = saldo(m \setminus \{n\}) - n.valor)
							v
							(m.tm = CREDITO => \exists n:m @ saldo(m) = n.valor + saldo(m \setminus \{n\})))\\
\end{schema}

\begin{zed}
	Conta ::= cc \ldata ContaCorrente \rdata | cp \ldata ContaPoupanca \rdata
\end{zed}

\begin{schema}{Movimentacao}
	tm: TipoMovimentacao\\
	valor: \nat
\end{schema}

\begin{schema}{Cliente}
	nome: Nome\\
\end{schema}

\begin{schema}{Gerente}
	nome: Nome\\
\end{schema}

\begin{schema}{LogAddConta}
	c?: Conta\\
	g?: Gerente\\
\end{schema}

\begin{schema}{LogDelConta}
	c?: Conta\\
	g?: Gerente\\
\end{schema}

\begin{schema}{LogAddDependente}
	c?: Conta\\
	d?: Cliente\\
	g?: Gerente\\
\end{schema}

\begin{schema}{LogDelDependente}
	c?: Conta\\
	d?: Cliente\\
	g?: Gerente\\
\end{schema}

\begin{zed}
	OperacaoGerente ::= ADD_CONTA \ldata LogAddConta\rdata | DEL_CONTA \ldata LogDelConta \rdata | ADD_DEPENDENTE \ldata LogAddDependente \rdata | DEL_DEPENDENTE \ldata LogDelDependente \rdata
\end{zed}

\begin{schema}{Banco}
	gerentes: \power Gerente\\
	contas: \power Conta\\
	clientes : \power Cliente\\
	titulares : Cliente \pinj Conta\\
	dependentes : Cliente \pinj Conta\\
	historico_g : Gerente \pfun \seq OperacaoGerente\\
\where
	\ran dependentes \subseteq \ran titulares\\
	\dom titulares \cap \dom dependentes = \emptyset\\
	\dom titulares \cup \dom dependentes = clientes\\
	\ran titulares = contas\\
\end{schema}


------

\begin{schema}{AbrirConta}
	\Delta Banco\\
	gerente? : Gerente\\
	titular? : Cliente\\
	c? : Conta\\
\where
	titular? \notin clientes\\
	c? \notin contas\\
	titulares' = titulares \cup \{ titular? \mapsto c? \}\\
	historico_g' = historico_g \oplus (\cat ADD_CONTA(\lblot c == c?, g == gerente? \rblot))\\
	gerentes' = gerentes\\
	dependentes' = dependentes\\
\end{schema}

\begin{schema}{FecharConta}
	\delta Banco\\
	c? : Conta\\
\where
	c? \in contas\\
	titulares' = titulares \setminus (c?.tipo.titular)\\
	dependentes' = dependentes \setminus (c?.tipo \in \ran ContaConjunta => ((ContaConjunta~)(c?)).dependente)\\
	gerentes' = gerentes\\
\end{schema}

\begin{schema}{AdicionarDependente}
	\delta Banco\\
	c? : Conta\\
	dependente? : Cliente\\
\where
	depente? \notin clientes\\
	dependentes' = dependentes \cup \{ dependente? \mapsto c? \}\\
	titulares' = titulares\\
	gerentes' = gerentes\\
\end{schema}

\begin{schema}{RemoverDependente}
	\delta Banco\\
	c? : Conta\\
	dependente? : Cliente\\
\where
	depente? \in \dom dependentes\\
	dependentes' = \dom dependentes \setminus dependente? \\
	titulares' = titulares\\
	gerentes' = gerentes\\
\end{schema}



